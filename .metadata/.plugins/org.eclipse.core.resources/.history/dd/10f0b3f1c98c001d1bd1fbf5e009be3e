/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "software_timer.h"
#include "button.h"
#include "math.h"
#include "global.h"
#include "led.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void display7SEG (int num, GPIO_TypeDef * GPIO_TYPE, uint16_t a_Pin, uint16_t b_Pin, uint16_t c_Pin, uint16_t d_Pin, uint16_t e_Pin, uint16_t f_Pin, uint16_t g_Pin){
	switch (num){
		case 0:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, SET);
			break;
		case 1:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, SET);
			break;
		case 2:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, RESET);
			break;
		case 3:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, RESET);
			break;
		case 4:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, RESET);
			break;
		case 5:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, RESET);
			break;
		case 6:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, RESET);
			break;
		case 7:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, SET);
			break;
		case 8:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, RESET);
			break;
		case 9:
			HAL_GPIO_WritePin(GPIO_TYPE, a_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, b_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, c_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, d_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, e_Pin, SET);
			HAL_GPIO_WritePin(GPIO_TYPE, f_Pin, RESET);
			HAL_GPIO_WritePin(GPIO_TYPE, g_Pin, RESET);
			break;
		default:
			break;
	}
}
int keyEvent_0 = -1;
int keyEvent_1 = -1;
int keyEvent_2 = -1;

int keyEvent_3 = -1;
int time_duration = 0;
int first_red_duration = 7;
int first_yellow_duration = 2;
int first_green_duration = 5;
int second_red_duration = 7;
int second_yellow_duration = 2;
int second_green_duration = 5;
int first_traffic_state = 0;
int second_traffic_state = 1;

void fsm_simple_buttons_run() {
	keyEvent_0 = keyEvent_1;
	keyEvent_1 = keyEvent_2;
	keyEvent_2 = getButtonEvent();
	if(keyEvent_0 == keyEvent_1 && keyEvent_1 == keyEvent_2) {
		if(keyEvent_3 != keyEvent_2) {
			keyEvent_3 = keyEvent_2;
			if(mode == 2) {
				if(keyEvent_2 == 2) {
					first_red_duration = time_duration;
					second_red_duration = time_duration;
					first_traffic_state = 0;
					second_traffic_state = 1;
					clearAllTrafficLight();
				}
				if(keyEvent_2 == 1) {
					time_duration += 1;
					if (time_duration > 99) time_duration = 0;
				}
			}
			if(mode == 3) {
				if(keyEvent_2 == 2) {
					first_yellow_duration = time_duration;
					second_yellow_duration = time_duration;
					first_traffic_state = 0;
					second_traffic_state = 1;
					clearAllTrafficLight();
				}
				if(keyEvent_2 == 1) {
					time_duration += 1;
					if (time_duration > 99) time_duration = 0;
				}
			}
			if(mode == 4) {
				if(keyEvent_2 == 2) {
					first_green_duration = time_duration;
					second_green_duration = time_duration;
					first_traffic_state = 0;
					second_traffic_state = 1;
				}
				if(keyEvent_2 == 1) {
					time_duration += 1;
					if (time_duration > 99) time_duration = 0;
				}
			}
			if(keyEvent_2 == 0) {
				clearAllTrafficLight();
				mode += 1;
				setTimer3(0);
				if (mode > 4) mode = 1;
				if (mode == 1) {
					setTimer2(first_red_duration*100);
					setTimer3(second_green_duration*100);
					HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
					HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
				}
				time_duration = 0;

			}
		}
	}
}
void setFirstTrafficLight(int state) {
	switch (state) {
		case RED_STATE:
		  setTimer2(first_green_duration*100);
		  setTraffic(1, 0, 1, 0);
		  //Write to green
		  first_traffic_state = GREEN_STATE;
		  break;
		case GREEN_STATE:
		  setTimer2(first_yellow_duration*100);
		  setTraffic(1, 0, 0, 1);
		  //Write to yellow
		  first_traffic_state = YELLOW_STATE;
		  break;
		case YELLOW_STATE:
		  setTraffic(1, 1, 0, 0);
		  setTimer2(first_red_duration*100);
		  //Write to red
		  first_traffic_state = RED_STATE;
		  break;
		default:
		  break;
	}
}
void setSecondTrafficLight(int state) {
	switch (state) {
		case RED_STATE:
		  setTimer3(second_green_duration*100);
		  setTraffic(2, 0, 1, 0);
		  //Write to green
		  second_traffic_state = GREEN_STATE;
		  break;
		case GREEN_STATE:
		  setTimer3(second_yellow_duration*100);
		  setTraffic(2, 0, 0, 1);
		  //Write to yellow
		  second_traffic_state = YELLOW_STATE;
		  break;
		case YELLOW_STATE:
		  setTimer3(second_red_duration*100);
		  setTraffic(2, 1, 0, 0);
		  //Write to red
		  second_traffic_state = RED_STATE;
		  break;
		default:
		  break;
	}
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  	setTimer1(50);
    setTimer4(1);
    setTimer5(50);
    setTimer2(first_red_duration*100);
    setTimer3(second_green_duration*100);
    HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
    HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(timer5_flag == 1 && mode != MODE_1_MANUAL) {
	  		  setTimer5(50);
	  		  switch (mode) {
	  		  case MODE_2_RED:
	  			  blink_red();
	  			  break;
	  		  case MODE_3_YELLOW:
	  			  blink_yellow();
	  			  break;
	  		  case MODE_4_GREEN:
	  			  blink_green();
	  			  break;
	  		  }
	  	  }
	  	  if(timer4_flag == 1) {
	  		  setTimer4(1);
	  		  fsm_simple_buttons_run();
	  	  }
	  	  if(timer2_flag == 1 && mode == MODE_1_MANUAL) {
	  		  setFirstTrafficLight(first_traffic_state);
	  	  }
	  	  if(timer3_flag == 1 && mode == MODE_1_MANUAL) {
	  		  setSecondTrafficLight(second_traffic_state);
	  	  }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	timerRun();
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
